//
// Generated by JTB 1.3.2
//

package utils;
import syntaxtree.*;
import visitor.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
@SuppressWarnings("override")
public class SecondPassVisitor<A> extends GJDepthFirst<StringBuilder,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   static int counter = 1000;
   static int labelCounter = 0; 
   static int paramCounter = 1; 

   public HashMap<String, Integer> varToTemp = new HashMap<>();
   public HashMap<String, HashMap<String,Integer>> methodIndex = new HashMap<>();
   public HashMap<String, HashMap<String,Integer>> varIndex = new HashMap<>();
   public HashMap<String, String> varToClass = new HashMap<>();
   public boolean inMethod = false;
   public boolean hstoreCall = false;
   public StringBuilder currClass = new StringBuilder("");
   public StringBuilder prevMessage = new StringBuilder("");
   public allclasses ac;

   public StringBuilder visit(NodeList n, A argu) {
      StringBuilder ans = new StringBuilder("");
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         ans.append(String.valueOf(e.nextElement().accept(this, argu)));
      }
      return ans;
   }

   public StringBuilder visit(NodeListOptional n, A argu) {
      if (n.present()) {
         StringBuilder ans=new StringBuilder("");
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            ans.append(String.valueOf(e.nextElement().accept(this,argu)));
         }
         return ans;
      }
      else
         return new StringBuilder("");
   }

   public StringBuilder visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return new StringBuilder("");
   }

   public StringBuilder visit(NodeSequence n, A argu) {
      StringBuilder ans=new StringBuilder("");
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         ans.append(String.valueOf(e.nextElement().accept(this,argu)));
      }
      return ans;
   }

   public StringBuilder visit(NodeToken n, A argu) { return new StringBuilder(""); }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( ImportFunction() )?
    * f1 -> MainClass()
    * f2 -> ( TypeDeclaration() )*
    * f3 -> <EOF>
    */
   public StringBuilder visit(Goal n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      ans.append(n.f1.accept(this, argu));
      ans.append(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "import"
    * f1 -> "java.util.function.Function"
    * f2 -> ";"
    */
   public StringBuilder visit(ImportFunction n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public StringBuilder visit(MainClass n, A argu) {
      StringBuilder ans=new StringBuilder("MAIN");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      ans.append(n.f14.accept(this, argu));
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      ans.append("\nEND\n");
      return ans;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public StringBuilder visit(TypeDeclaration n, A argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public StringBuilder visit(ClassDeclaration n, A argu) {
      n.f0.accept(this, argu);
      currClass = n.f1.accept(this, argu);
      addClassInfo(currClass.toString());
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f5.accept(this, argu);
      return n.f4.accept(this, argu);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public StringBuilder visit(ClassExtendsDeclaration n, A argu) {
      n.f0.accept(this, argu);
      currClass=n.f1.accept(this, argu);
      addClassInfo(currClass.toString());
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f7.accept(this, argu);
      return n.f6.accept(this, argu);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public StringBuilder visit(VarDeclaration n, A argu) {
      StringBuilder ans=new StringBuilder("");
      StringBuilder type=n.f0.accept(this, argu);
      StringBuilder name = n.f1.accept(this, argu);
      if (inMethod) {
         varToTemp.put(String.valueOf(name), fresh());
         ans.append("\nMOVE TEMP ").append(varToTemp.get(name.toString())).append(" 0");
      }
      if(type.length()>0)
         varToClass.put(name.toString(), type.toString());
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public StringBuilder visit(MethodDeclaration n, A argu) {
      StringBuilder ans = new StringBuilder("\n\n");
      inMethod = true;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      StringBuilder currMethod=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      paramCounter = 1;
      n.f4.accept(this, argu);
      paramCounter = 1;
      int paramCount = countParamStars(currClass.toString(), currMethod.toString());
      ans.append(currClass).append("___").append(currMethod).append("\t[ ").append(String.valueOf(paramCount)).append(" ]\nBEGIN\n");
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      ans.append(n.f7.accept(this, argu));
      ans.append(n.f8.accept(this, argu));
      ans.append("RETURN\t");
      n.f9.accept(this, argu);
      ans.append(n.f10.accept(this, argu));
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      ans.append("\nEND\n");
      inMethod = false;
      varToTemp.clear();
      return ans;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public StringBuilder visit(FormalParameterList n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public StringBuilder visit(FormalParameter n, A argu) {
      StringBuilder ans=new StringBuilder("");
      StringBuilder type=n.f0.accept(this, argu);
      String name=(n.f1.accept(this, argu)).toString();
      varToTemp.put(name, paramCounter++);
      if(type.length()>0){
         varToClass.put(name, type.toString());
         addClassInfo(type.toString());
      }
      return ans;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public StringBuilder visit(FormalParameterRest n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    *       | LambdaType()
    */
    public StringBuilder visit(Type n, A argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public StringBuilder visit(ArrayType n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "boolean"
    */
   public StringBuilder visit(BooleanType n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "int"
    */
   public StringBuilder visit(IntegerType n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "Function"
    * f1 -> "<"
    * f2 -> Identifier()
    * f3 -> ","
    * f4 -> Identifier()
    * f5 -> ">"
    */
   public StringBuilder visit(LambdaType n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public StringBuilder visit(Statement n, A argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public StringBuilder visit(Block n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      ans.append(n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public StringBuilder visit(AssignmentStatement n, A argu) {
      StringBuilder ans = new StringBuilder("\nMOVE ");
      hstoreCall = true;
      StringBuilder id=n.f0.accept(this, argu);
      hstoreCall = false;
      if (id.toString().startsWith("HSTORE TEMP 0")) {
         ans = new StringBuilder("\n");
      }
      ans.append(id);
      n.f1.accept(this, argu);
      ans.append(" ");
      ans.append(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      ans.append("\n");
      return ans;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public StringBuilder visit(ArrayAssignmentStatement n, A argu) {
      StringBuilder ans=new StringBuilder("\nHSTORE ");
      ans.append("\nPLUS ").append(n.f0.accept(this, argu)).append(" ");
      String temp1 = String.valueOf(fresh());
      String temp2 = String.valueOf(fresh());
      String temp3 = String.valueOf(fresh());
      n.f1.accept(this, argu);
      ans.append("\nBEGIN\n");
      ans.append("MOVE TEMP ").append(temp1).append(" ").append(n.f2.accept(this, argu));
      ans.append("\nMOVE TEMP ").append(temp2).append(" TIMES 4 PLUS 1 TEMP ").append(temp1);
      ans.append("\nRETURN TEMP ").append(temp2);
      ans.append("\nEND\n");
      ans.append(" 0 ");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      ans.append("\nBEGIN\n");
      ans.append("MOVE TEMP ").append(temp3).append(" ").append(n.f5.accept(this, argu));
      ans.append("\nRETURN TEMP ").append(temp3);
      ans.append("\nEND\n");
      n.f6.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public StringBuilder visit(IfStatement n, A argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public StringBuilder visit(IfthenStatement n, A argu) {
      StringBuilder ans = new StringBuilder("\nCJUMP ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      StringBuilder elseLabel = getLabel();
      ans.append(" ").append(elseLabel);
      n.f3.accept(this, argu);
      ans.append(n.f4.accept(this, argu));
      ans.append("\n").append(elseLabel).append(" NOOP\n");
      return ans;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public StringBuilder visit(IfthenElseStatement n, A argu) {
      StringBuilder ans = new StringBuilder("\nCJUMP ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      StringBuilder elseLabel = getLabel();
      StringBuilder endLabel = getLabel();
      ans.append(" ").append(elseLabel);
      n.f3.accept(this, argu);
      ans.append(n.f4.accept(this, argu));
      ans.append("\nJUMP ").append(endLabel).append("\n").append(elseLabel).append("\t");
      n.f5.accept(this, argu);
      ans.append(n.f6.accept(this, argu));
      ans.append("\n").append(endLabel).append(" NOOP\n");
      return ans;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public StringBuilder visit(WhileStatement n, A argu) {
      StringBuilder ans = new StringBuilder("\n");
      StringBuilder startLabel = getLabel();
      StringBuilder endLabel = getLabel();
      ans.append(startLabel).append("\tCJUMP ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      ans.append(" ").append(endLabel);
      n.f3.accept(this, argu);
      ans.append(n.f4.accept(this, argu));
      ans.append("JUMP ").append(startLabel).append("\n").append(endLabel).append(" NOOP\n");
      return ans;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public StringBuilder visit(PrintStatement n, A argu) {
      StringBuilder ans=new StringBuilder("\nPRINT ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      ans.append("\n");
      return ans;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | LambdaExpression()
    *       | PrimaryExpression()
    */
   public StringBuilder visit(Expression n, A argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "("
    * f1 -> Identifier()
    * f2 -> ")"
    * f3 -> "->"
    * f4 -> Expression()
    */
   public StringBuilder visit(LambdaExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(AndExpression n, A argu) {
      StringBuilder ans = new StringBuilder("\nBEGIN\n");
      String temp1=String.valueOf(fresh());
      StringBuilder label = getLabel();
      ans.append("MOVE TEMP ").append(temp1).append(" 0");
      ans.append("\nCJUMP ").append(n.f0.accept(this, argu)).append(" ").append(label);
      n.f1.accept(this, argu);
      ans.append("\nCJUMP ").append(n.f2.accept(this, argu)).append(" ").append(label);
      ans.append("\nMOVE TEMP ").append(temp1).append(" 1\n");
      ans.append(label).append(" NOOP\n").append("\tRETURN TEMP ").append(temp1);
      ans.append("\nEND\n");
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(OrExpression n, A argu) {
      StringBuilder ans = new StringBuilder("\nBEGIN\n");
      String temp1=String.valueOf(fresh());
      StringBuilder label1 = getLabel();
      StringBuilder label2 = getLabel();
      ans.append("MOVE TEMP ").append(temp1).append(" 1");
      ans.append("\nCJUMP ").append(n.f0.accept(this, argu)).append(" ").append(label1);
      ans.append("\nJUMP ").append(label2);
      n.f1.accept(this, argu);
      ans.append("\nCJUMP ").append(n.f2.accept(this, argu)).append(" ").append(label1);
      ans.append("\nJUMP ").append(label2).append("\n");
      ans.append(label1).append("\tMOVE TEMP ").append(temp1).append(" 0\n");
      ans.append(label2).append(" NOOP\n").append("\nRETURN TEMP ").append(temp1);
      ans.append("\nEND\n");
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(CompareExpression n, A argu) {
      StringBuilder ans=new StringBuilder("LE ");
      ans.append(n.f0.accept(this, argu)).append(" ");
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(neqExpression n, A argu) {
      StringBuilder ans=new StringBuilder("NE ");
      ans.append(n.f0.accept(this, argu)).append(" ");
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(AddExpression n, A argu) {
      StringBuilder ans=new StringBuilder("PLUS ");
      ans.append(n.f0.accept(this, argu)).append(" ");
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(MinusExpression n, A argu) {
      StringBuilder ans=new StringBuilder("MINUS ");
      ans.append(n.f0.accept(this, argu)).append(" ");
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(TimesExpression n, A argu) {
      StringBuilder ans=new StringBuilder("TIMES ");
      ans.append(n.f0.accept(this, argu)).append(" ");
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(DivExpression n, A argu) {
      StringBuilder ans=new StringBuilder("DIV ");
      ans.append(n.f0.accept(this, argu)).append(" ");
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public StringBuilder visit(ArrayLookup n, A argu) {
      StringBuilder ans = new StringBuilder("");
      String temp1 = String.valueOf(fresh());
      String temp2 = String.valueOf(fresh());
      StringBuilder name = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      StringBuilder expr=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      ans.append("\nBEGIN\n");
      ans.append("MOVE TEMP ").append(temp1).append(" PLUS ").append(name);
      ans.append(" TIMES 4 PLUS 1 ").append(expr);
      ans.append("\nHLOAD TEMP ").append(temp2).append(" TEMP ").append(temp1).append(" 0");
      ans.append("\nRETURN TEMP ").append(temp2);
      ans.append("\nEND\n");
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public StringBuilder visit(ArrayLength n, A argu) {
      StringBuilder ans = new StringBuilder("");
      String temp1 = String.valueOf(fresh());
      StringBuilder name=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      ans.append("\nBEGIN\n");
      ans.append("HLOAD TEMP ").append(temp1).append(" ").append(name).append(" 0");
      ans.append("\nRETURN TEMP ").append(temp1);
      ans.append("\nEND\n");
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public StringBuilder visit(MessageSend n, A argu) {
      StringBuilder ans = new StringBuilder("\nCALL \nBEGIN\n");
      StringBuilder temp1 = new StringBuilder("TEMP ").append(fresh()); //this
      StringBuilder temp2 = new StringBuilder("TEMP ").append(fresh()); // vtable
      StringBuilder temp3 = new StringBuilder("TEMP ").append(fresh()); //actual funcn
      ans.append("MOVE ").append(temp1).append(" ");
      StringBuilder PE = n.f0.accept(this, argu);
      ans.append(PE);
      n.f1.accept(this, argu);
      StringBuilder name = n.f2.accept(this, argu);
      ans.append("\nHLOAD ").append(temp2).append(" ").append(temp1).append(" 0");
      int offset = getOffset(PE,name);
      ans.append("\nHLOAD ").append(temp3).append(" ").append(temp2).append(" ").append(offset);
      ans.append("\nRETURN ").append(temp3);
      ans.append("\nEND\n");
      ans.append("( ").append(temp1).append(" ");
      n.f3.accept(this, argu);
      ans.append(n.f4.accept(this, argu)).append(" )");
      n.f5.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public StringBuilder visit(ExpressionList n, A argu) {
      StringBuilder ans=new StringBuilder("");
      ans.append(n.f0.accept(this, argu));
      ans.append(n.f1.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public StringBuilder visit(ExpressionRest n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      ans.append(" ").append(n.f1.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public StringBuilder visit(PrimaryExpression n, A argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public StringBuilder visit(IntegerLiteral n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      ans.append(n.f0.toString());
      return ans;
   }

   /**
    * f0 -> "true"
    */
   public StringBuilder visit(TrueLiteral n, A argu) {
      StringBuilder ans=new StringBuilder("1");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "false"
    */
   public StringBuilder visit(FalseLiteral n, A argu) {
      StringBuilder ans=new StringBuilder("0");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public StringBuilder visit(Identifier n, A argu) {
      n.f0.accept(this, argu);
      String name = n.f0.toString();
      if (varToTemp.containsKey(name)) {
         return new StringBuilder("TEMP ").append(varToTemp.get(name));
      }
      if (varIndex.containsKey(currClass.toString()) && varIndex.get(currClass.toString()).containsKey(name)) {
         if (hstoreCall) {
            return new StringBuilder("HSTORE TEMP 0 ").append(varIndex.get(currClass.toString()).get(name));
         }
         StringBuilder temp = new StringBuilder("TEMP ").append(fresh());
         StringBuilder ans = new StringBuilder("\nBEGIN\nHLOAD ").append(temp).append(" TEMP 0 ");
         ans.append(varIndex.get(currClass.toString()).get(name));
         ans.append("\nRETURN ").append(temp).append("\nEND\n");
         return ans;
      }
      return new StringBuilder(name);
   }

   /**
    * f0 -> "this"
    */
   public StringBuilder visit(ThisExpression n, A argu) {
      StringBuilder ans=new StringBuilder("TEMP 0");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public StringBuilder visit(ArrayAllocationExpression n, A argu) {

      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      ans.append("\nBEGIN\n");
      String temp1 = String.valueOf(fresh());
      String temp2 = String.valueOf(fresh());
      String temp3 = String.valueOf(fresh());
      String temp4 = String.valueOf(fresh());
      StringBuilder label1=getLabel();
      StringBuilder label2=getLabel();
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      StringBuilder sz = n.f3.accept(this, argu);
      ans.append("MOVE TEMP ").append(temp2).append(" PLUS 1 ").append(sz);
      ans.append("\nMOVE TEMP ").append(temp1).append(" HALLOCATE TIMES TEMP ").append(temp2).append(" 4");
      ans.append("\nMOVE TEMP ").append(temp3).append(" 0\n");

      ans.append(label1).append("\tCJUMP LE TEMP ").append(temp3).append(" ").append(sz).append(" ").append(label2);

      ans.append("\nMOVE TEMP ").append(temp4).append(" PLUS TEMP ").append(temp1)
         .append(" TIMES TEMP ").append(temp3).append(" 4");
      ans.append("\nHSTORE TEMP ").append(temp4).append(" 0 0");

      ans.append("\nMOVE TEMP ").append(temp3).append(" PLUS TEMP ").append(temp3).append(" 1");
      ans.append("\nJUMP ").append(label1);

      ans.append("\n").append(label2).append(" NOOP\n");
      ans.append("HSTORE TEMP ").append(temp1).append(" 0 ").append(sz);
      ans.append("\nRETURN TEMP ").append(temp1).append("\nEND\n");
      n.f4.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public StringBuilder visit(AllocationExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      String className = n.f1.accept(this, argu).toString();
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      ans.append(addClassInfo(className));
      return ans;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public StringBuilder visit(NotExpression n, A argu) {
      StringBuilder ans=new StringBuilder("MINUS 1 ");
      n.f0.accept(this, argu);
      ans.append(n.f1.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public StringBuilder visit(BracketExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      ans.append(n.f1.accept(this, argu));
      n.f2.accept(this, argu);
      return ans;
   }


   private int fresh() {
      counter++;
      return counter;
   }
   
   private int countParamStars(String currClass, String currMethod) {
      classinfo ci = ac.classes.get(currClass);
      String type = ci.methods.get(currClass+"___"+currMethod);
      if (type.charAt(0) == '-') {
         return 1;
      }
      int count = 2;
      for (int i = 0; i < type.length(); i++) {
         char ch = type.charAt(i);
         if (ch == '*') {
            count++;
         }
      }
      return count;
   }

   private StringBuilder getLabel() {
      labelCounter++;
      return new StringBuilder("L").append(labelCounter);
   }

   private StringBuilder addClassInfo(String className) {
      classinfo ci = ac.classes.get(className);
      StringBuilder ans = new StringBuilder("\nBEGIN\n");
      StringBuilder temp1 = new StringBuilder("TEMP ").append(fresh()); //class obj
      StringBuilder temp2 = new StringBuilder("TEMP ").append(fresh()); //vtable
      StringBuilder temp3 = new StringBuilder("TEMP ").append(fresh()); //tempvar
      StringBuilder temp4 = new StringBuilder("TEMP ").append(fresh()); //tempvar 2
      StringBuilder label1 = getLabel();
      StringBuilder label2 = getLabel();
      ans.append("MOVE ").append(temp1).append(" HALLOCATE ").append((ci.vars.size() + 1) * 4);
      ans.append("\nMOVE ").append(temp2).append(" HALLOCATE ").append(ci.methods.size() * 4);
      ans.append("\nMOVE ").append(temp3).append(" 0\n");

      ans.append(label1).append("\tCJUMP LE ").append(temp3).append(" ").append(ci.vars.size() + 1).append(" ")
            .append(label2);

      ans.append("\nMOVE ").append(temp4).append(" PLUS ").append(temp1)
            .append(" TIMES ").append(temp3).append(" 4");
      ans.append("\nHSTORE ").append(temp4).append(" 0 0");

      ans.append("\nMOVE ").append(temp3).append(" PLUS ").append(temp3).append(" 1");
      ans.append("\nJUMP ").append(label1);

      ans.append("\n").append(label2).append(" NOOP ");
      int index = 0;
      for (String key : ci.methods.keySet()) {
         ans.append("\nHSTORE ").append(temp2).append(" ").append(index).append("\t").append(key);
         if (!methodIndex.containsKey(className)) {
            methodIndex.put(className, new HashMap<>());
         }
         methodIndex.get(className).put(key.substring(key.indexOf("___") + 3), index);
         index += 4;
      }
      index = 4;
      for (String key : ci.vars.keySet()) {
         if (!varIndex.containsKey(className)) {
            varIndex.put(className, new HashMap<>());
         }
         varIndex.get(className).put(key, index);
         index += 4;
      }
      ans.append("\nHSTORE ").append(temp1).append(" 0 ").append(temp2);
      ans.append("\nRETURN ").append(temp1);
      ans.append("\nEND\n");
      return ans;
   }

   int getOffset(StringBuilder PE, StringBuilder name) {
      int ans = 0;
      if (PE.toString().startsWith("TEMP")) {
         int temp = Integer.parseInt(PE.substring(5));
         if (temp == 0) {
            return methodIndex.get(currClass.toString()).get(name.toString());
         }
         String varName = "";
         for (Map.Entry<String, Integer> entry : varToTemp.entrySet()) {
            if (entry.getValue().equals(temp)) {
               varName = entry.getKey();
            }
         }
         String varType = varToClass.get(varName);
         int x = methodIndex.get(varType).get(name.toString());
         String name2 = varType + "___" + name;
         if (ac.classes.get(varType).methods.get(name2) != null
         && (ac.classes.get(varType).methods.get(name2)).length() > 0) {
                  prevMessage = new StringBuilder(ac.classes.get(varType).methods.get(name2).split("->")[1]);
         }
         return x;
      } else if (PE.toString().startsWith("\nBEGIN")) {
         String code = PE.toString();
         String target = name.toString();

         String[] lines = code.split("\\n");
         for (String line : lines) {
            line = line.trim();
            if (line.startsWith("HSTORE")) {
               int tripleIdx = line.indexOf("___");
               if (tripleIdx != -1) {
                  String methodPart = line.substring(tripleIdx + 3).trim();
                  if (methodPart.equals(target)) {
                     String[] parts = line.split("\\s+");
                     if (parts.length >= 4) {
                        prevMessage = new StringBuilder(
                              ac.classes.get(parts[4].substring(0, parts[4].indexOf("___"))).methods.get(parts[4])
                                    .split("->")[1]);
                        int offset = Integer.parseInt(parts[3]);
                        return offset;
                     }
                  }
               }
            }
         }
         String line = lines[2];
         String offset = line.substring((line.trim()).lastIndexOf(" ")+1);
         String varName = "";
         for (String s : varIndex.get(currClass.toString()).keySet()) {
            Integer x = varIndex.get(currClass.toString()).get(s);
            if (Objects.equals(x, Integer.valueOf(offset))) {
               varName = s;
            }
         }
         // System.out.println("1"+currClass+"1\t1"+varName+"1");
         String type = ac.classes.get(currClass.toString()).vars.get(varName);
         // System.out.println(methodIndex.get(type));
         
         return methodIndex.get(type).get(name.toString());
      }
      if (PE.toString().startsWith("\nCALL")) {
         if (methodIndex.containsKey(prevMessage.toString()))
            return methodIndex.get(prevMessage.toString()).get(name.toString());
      }
      System.out.println(PE);
      return -1;
   }
}