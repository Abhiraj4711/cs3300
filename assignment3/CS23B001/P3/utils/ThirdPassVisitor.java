//
// Generated by JTB 1.3.2
//

package utils;
import syntaxtree.*;
import visitor.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
@SuppressWarnings("override")
public class ThirdPassVisitor<A> extends GJDepthFirst<StringBuilder,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   static int counter = 0;

   public HashMap<Integer,String> varToTemp = new HashMap<>();

   public StringBuilder visit(NodeList n, A argu) {
      StringBuilder ans=new StringBuilder("");
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         ans.append(e.nextElement().accept(this,argu));
      }
      return ans;
   }

   public StringBuilder visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         StringBuilder ans=new StringBuilder("");
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            ans.append(e.nextElement().accept(this,argu));
         }
         return ans;
      }
      else
         return new StringBuilder("");
   }

   public StringBuilder visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return new StringBuilder("");
   }

   public StringBuilder visit(NodeSequence n, A argu) {
      StringBuilder ans=new StringBuilder("");
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         ans.append(e.nextElement().accept(this,argu));
      }
      return ans;
   }

   public StringBuilder visit(NodeToken n, A argu) { return new StringBuilder(""); }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( ImportFunction() )?
    * f1 -> MainClass()
    * f2 -> ( TypeDeclaration() )*
    * f3 -> <EOF>
    */
   public StringBuilder visit(Goal n, A argu) {
      StringBuilder ans=new StringBuilder("");
      ans.append(n.f0.accept(this, argu));
      ans.append(n.f1.accept(this, argu));
      ans.append(n.f2.accept(this, argu));
      ans.append(n.f3.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> "import"
    * f1 -> "java.util.function.Function"
    * f2 -> ";"
    */
   public StringBuilder visit(ImportFunction n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public StringBuilder visit(MainClass n, A argu) {
      StringBuilder ans=new StringBuilder("MAIN\n");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      ans.append(n.f14.accept(this, argu));
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      ans.append("\nEND");
      return ans;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public StringBuilder visit(TypeDeclaration n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public StringBuilder visit(ClassDeclaration n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public StringBuilder visit(ClassExtendsDeclaration n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public StringBuilder visit(VarDeclaration n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public StringBuilder visit(MethodDeclaration n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public StringBuilder visit(FormalParameterList n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public StringBuilder visit(FormalParameter n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public StringBuilder visit(FormalParameterRest n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    *       | LambdaType()
    */
   public StringBuilder visit(Type n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public StringBuilder visit(ArrayType n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "boolean"
    */
   public StringBuilder visit(BooleanType n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "int"
    */
   public StringBuilder visit(IntegerType n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "Function"
    * f1 -> "<"
    * f2 -> Identifier()
    * f3 -> ","
    * f4 -> Identifier()
    * f5 -> ">"
    */
   public StringBuilder visit(LambdaType n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public StringBuilder visit(Statement n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public StringBuilder visit(Block n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public StringBuilder visit(AssignmentStatement n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public StringBuilder visit(ArrayAssignmentStatement n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public StringBuilder visit(IfStatement n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public StringBuilder visit(IfthenStatement n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public StringBuilder visit(IfthenElseStatement n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public StringBuilder visit(WhileStatement n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public StringBuilder visit(PrintStatement n, A argu) {
      StringBuilder ans=new StringBuilder("\tPRINT ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      ans.append(n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | LambdaExpression()
    *       | PrimaryExpression()
    */
   public StringBuilder visit(Expression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      ans.append(n.f0.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> "("
    * f1 -> Identifier()
    * f2 -> ")"
    * f3 -> "->"
    * f4 -> Expression()
    */
   public StringBuilder visit(LambdaExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(AndExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(OrExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(CompareExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(neqExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(AddExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(MinusExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(TimesExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public StringBuilder visit(DivExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public StringBuilder visit(ArrayLookup n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public StringBuilder visit(ArrayLength n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public StringBuilder visit(MessageSend n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public StringBuilder visit(ExpressionList n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public StringBuilder visit(ExpressionRest n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public StringBuilder visit(PrimaryExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      ans.append(n.f0.accept(this, argu));
      return ans;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public StringBuilder visit(IntegerLiteral n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      ans.append(n.f0.toString());
      return ans;
   }

   /**
    * f0 -> "true"
    */
   public StringBuilder visit(TrueLiteral n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "false"
    */
   public StringBuilder visit(FalseLiteral n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public StringBuilder visit(Identifier n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "this"
    */
   public StringBuilder visit(ThisExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public StringBuilder visit(ArrayAllocationExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public StringBuilder visit(AllocationExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public StringBuilder visit(NotExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ans;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public StringBuilder visit(BracketExpression n, A argu) {
      StringBuilder ans=new StringBuilder("");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ans;
   }


   private StringBuilder fresh() {
      counter++;
      return new StringBuilder(String.valueOf(counter));
   }
}
