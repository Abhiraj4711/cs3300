//
// Generated by JTB 1.3.2
//

package utils;
import com.sun.source.doctree.SystemPropertyTree;
import visitor.*;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SecondPassVisitor extends GJDepthFirst<String,allclasses> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   HashMap<String, String> allvars = new HashMap<>();
   HashMap<String, String> allvarsinClass = new HashMap<>();
   HashMap<String, String> allvarsInMethod = new HashMap<>();
   boolean inMethod = false;
   boolean returnRaw = false;
   String currentClass = "";
   int depth = 0;
   String lamType = "";

   public String visit(NodeList n, allclasses argu) {
      String ci = "";
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         String c = e.nextElement().accept(this, argu);
         if(c!=null){
            ci = ci.concat(c);
         }
      }
      return ci;
   }

   public String visit(NodeListOptional n, allclasses argu) {
      if ( n.present() ) {
         String ci = "";
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            String c = e.nextElement().accept(this, argu);
            if(c!=null){
               ci = ci.concat(c);
            }
         }
         return ci;
      }
      else
         return null;
   }

   public String visit(NodeOptional n, allclasses argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return "";
   }

   public String visit(NodeSequence n, allclasses argu) {
      String ci ="";
      ci = "";
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         String c = e.nextElement().accept(this, argu);
         if (c != null) {
            ci = ci.concat(c);
         }
      }
      return ci;
   }

   public String visit(NodeToken n, allclasses argu) { return ""; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( ImportFunction() )?
    * f1 -> MainClass()
    * f2 -> ( TypeDeclaration() )*
    * f3 -> <EOF>
    */
   public String visit(Goal n, allclasses argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      exit(0);
      return "";
   }

   /**
    * f0 -> "import"
    * f1 -> "java.util.function.Function"
    * f2 -> ";"
    */
   public String visit(ImportFunction n, allclasses argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public String visit(MainClass n, allclasses argu) {
      n.f0.accept(this, argu);
      returnRaw = true;
      n.f1.accept(this, argu);
      returnRaw = false;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      returnRaw = true;
      n.f11.accept(this, argu);
      returnRaw = false;
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return "";
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n, allclasses argu) {
      n.f0.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n, allclasses argu) {
      n.f0.accept(this, argu);
      returnRaw = true;
      currentClass = n.f1.accept(this, argu);
      returnRaw = false;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      allvars.clear();
      allvarsinClass.clear();
      return "";
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n, allclasses argu) {
      n.f0.accept(this, argu);
      returnRaw = true;
      currentClass=n.f1.accept(this, argu);
      returnRaw = false;
      n.f2.accept(this, argu);
      depth = 1;
      returnRaw = true;
      String classext = n.f3.accept(this, argu);
      returnRaw = false;
      addVars(classext, argu);
      depth = 0;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      allvars.clear();
      allvarsinClass.clear();
      return "";
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n, allclasses argu) {
      returnRaw = true;
      String sf0 = n.f0.accept(this, argu);
      returnRaw = true;
      String sf1 = n.f1.accept(this, argu);
      returnRaw = false;
      allvars.put(sf1, sf0);
      if(inMethod)
         allvarsInMethod.put(sf1, sf0);
      else
         allvarsinClass.put(sf1, sf0);
      n.f2.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n, allclasses argu) {
      inMethod = true;
      n.f0.accept(this, argu);
      returnRaw = true;
      String sf1=n.f1.accept(this, argu);
      returnRaw = true;
      n.f2.accept(this, argu);
      returnRaw = true;
      n.f3.accept(this, argu);
      returnRaw = true;
      n.f4.accept(this, argu);
      returnRaw = false;
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String sf10=n.f10.accept(this, argu);
      if (!isSubtype(sf10, sf1, argu)) {
         exit(1);
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      allvars.keySet().removeAll(allvarsInMethod.keySet());
      allvarsInMethod.clear();
      inMethod = false;
      return "";
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n, allclasses argu) {
      String ci = "";
      String sf0 = n.f0.accept(this, argu);
      String sf1 = n.f1.accept(this, argu);
      if (sf0 != null) {
         ci = sf0;
         if (sf1 != null) {
            ci = ci.concat(sf1);
         }
      }
      return ci;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n, allclasses argu) {
      String ci;
      String sf0 = n.f0.accept(this, argu);
      String sf1 = n.f1.accept(this, argu);
      allvars.put(sf1, sf0);
      allvarsInMethod.put(sf1, sf0);
      return "";
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n, allclasses argu) {
      String ci;
      n.f0.accept(this, argu);
      ci="*".concat(n.f1.accept(this, argu));
      return ci;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    *       | LambdaType()
    */
   public String visit(Type n, allclasses argu) {
      String ci = n.f0.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public String visit(ArrayType n, allclasses argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return "int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n, allclasses argu) {
      n.f0.accept(this, argu);
      return "boolean";
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n, allclasses argu) {
      n.f0.accept(this, argu);
      return "int";
   }

   /**
    * f0 -> "Function"
    * f1 -> "<"
    * f2 -> Identifier()
    * f3 -> ","
    * f4 -> Identifier()
    * f5 -> ">"
    */
   public String visit(LambdaType n, allclasses argu) {
      String ci;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      returnRaw = true;
      String sf2=n.f2.accept(this, argu);
      returnRaw = false;
      n.f3.accept(this, argu);
      returnRaw = true;
      String sf4=n.f4.accept(this, argu);
      returnRaw = false;
      if (!argu.classes.containsKey(sf2) && !argu.classes.containsKey(sf4) && !"int".equals(sf4) && !"int".equals(sf2)
            && !"boolean".equals(sf4) && !"boolean".equals(sf2)) {
         exit(2);
      }
      n.f5.accept(this, argu);
      ci= "Function(".concat(sf2).concat(">>").concat(sf4).concat(")");
      return ci;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public String visit(Statement n, allclasses argu) {
      n.f0.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n, allclasses argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return "";
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n, allclasses argu) {
      returnRaw = false;
      String sf0 = n.f0.accept(this, argu);
      String prevLamType = lamType;
      n.f1.accept(this, argu);
      if (sf0.startsWith("Function(")) {
         lamType = new String(sf0);
      }
      String sf2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if (sf0.startsWith("Function(")) {
         String sf0arr[] = splitLambda(sf0);
         String sf2arr[] = splitLambda(sf2);
         if (!isSubtype(sf2arr[0], sf0arr[0], argu) || !isSubtype(sf2arr[1], sf0arr[1], argu)) {
            exit(1);
         }
      }
      if (!isSubtype(sf2, sf0, argu)) {
         exit(1);
      }
      lamType = prevLamType;
      return "";
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public String visit(ArrayAssignmentStatement n, allclasses argu) {
      String sf0 = n.f0.accept(this, argu);
      if (!"int[]".equals(sf0)) {
         exit(1);
      }
      n.f1.accept(this, argu);
      if (!"int".equals(n.f2.accept(this, argu))){
         exit(1);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if (!"int".equals(n.f5.accept(this, argu))) {
         exit(1);
      }
      n.f6.accept(this, argu);
      return "";
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public String visit(IfStatement n, allclasses argu) {
      n.f0.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(IfthenStatement n, allclasses argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if (!"boolean".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfthenElseStatement n, allclasses argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if (!"boolean".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n, allclasses argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if (!"boolean".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n, allclasses argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if (!"int".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return "";
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | LambdaExpression()
    *       | PrimaryExpression()
    */
   public String visit(Expression n, allclasses argu) {
      String ci = n.f0.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "("
    * f1 -> Identifier()
    * f2 -> ")"
    * f3 -> "->"
    * f4 -> Expression()
    */
   public String visit(LambdaExpression n, allclasses argu) {
      n.f0.accept(this, argu);
      returnRaw = true;
      String sf1 = n.f1.accept(this, argu);
      if (allvars.containsKey(sf1)) {
         exit(2);
      }
      returnRaw = false;
      String lams[] = splitLambda(lamType);
      allvars.put(sf1, lams[0]);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String sf4 = n.f4.accept(this, argu);
      allvars.remove(sf1);

      if (!isSubtype(sf4, lams[1], argu)) {
         exit(1);
      }
      return lamType;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public String visit(AndExpression n, allclasses argu) {
      if (!"boolean".equals(n.f0.accept(this, argu))) {
         exit(1);
      }
      n.f1.accept(this, argu);
      if (!"boolean".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      return "boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public String visit(OrExpression n, allclasses argu) {
      if (!"boolean".equals(n.f0.accept(this, argu))) {
         exit(1);
      }
      n.f1.accept(this, argu);
      if (!"boolean".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      return "boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public String visit(CompareExpression n, allclasses argu) {
      if (!"int".equals(n.f0.accept(this, argu))) {
         exit(1);
      }
      n.f1.accept(this, argu);
      if (!"int".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      return "boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public String visit(neqExpression n, allclasses argu) {
      if (!"int".equals(n.f0.accept(this, argu))) {
         exit(1);
      }
      n.f1.accept(this, argu);
      if (!"int".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      return "boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public String visit(AddExpression n, allclasses argu) {
      if (!"int".equals(n.f0.accept(this, argu))) {
         exit(1);
      }
      n.f1.accept(this, argu);
      if (!"int".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      return "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public String visit(MinusExpression n, allclasses argu) {
      if (!"int".equals(n.f0.accept(this, argu))) {
         exit(1);
      }
      n.f1.accept(this, argu);
      if (!"int".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      return "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public String visit(TimesExpression n, allclasses argu) {
      if (!"int".equals(n.f0.accept(this, argu))) {
         exit(1);
      }
      n.f1.accept(this, argu);
      if (!"int".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      return "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public String visit(DivExpression n, allclasses argu) {
      if (!"int".equals(n.f0.accept(this, argu))) {
         exit(1);
      }
      n.f1.accept(this, argu);
      if (!"int".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      return "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public String visit(ArrayLookup n, allclasses argu) {
      if (!"int[]".equals(n.f0.accept(this, argu))) {
         exit(1);
      }
      n.f1.accept(this, argu);
      if (!"int".equals(n.f2.accept(this, argu))) {
         exit(1);
      }
      n.f3.accept(this, argu);
      return "int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public String visit(ArrayLength n, allclasses argu) {
      if (!"int[]".equals(n.f0.accept(this, argu))) {
         exit(1);
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return "int";
   }

   /** Handle
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n, allclasses argu) {
      returnRaw = false;
      String sf0 = n.f0.accept(this, argu);
      if ("int".equals(sf0) || "boolean".equals(sf0)) {
         exit(1);
      }
      if ("int[]".equals(sf0)) {
         exit(2);
      }
      n.f1.accept(this, argu);
      returnRaw = true;
      String sf2 = n.f2.accept(this, argu);
      returnRaw = false;
      n.f3.accept(this, argu);
      String sf4 = n.f4.accept(this, argu);
      n.f5.accept(this, argu);


      if (sf0.startsWith("Function(")) {
         if ("apply".equals(sf2)) {
            if (checkCompatible(sf4,splitLambda(sf0)[0],argu)) {
               return splitLambda(sf0)[1];
            } else {
               exit(1);
            }
         } else {
            exit(1);
         }
      }
      

      String objclass;
      if (!argu.classes.containsKey(sf0)) {
         if(!allvars.containsKey(sf0))
            exit(1);
         objclass = allvars.get(sf0);
      } else {
         objclass = sf0;
      }
      String tempclass = objclass.concat("");
      String reqtype="ThisIsNotThereBro";
      while (!"ThisIsTheFinalClassNoClassAboveThis".equals(tempclass)) {
         if (argu.classes.get(tempclass).methods.containsKey(sf2)) {
            reqtype = argu.classes.get(tempclass).methods.get(sf2);
            break;
         }
         tempclass = argu.classes.get(tempclass).parent;
      }
      if ("ThisIsNotThereBro".equals(reqtype)) {
         exit(2);
      }
      String[] parts = reqtype.split("->", 2);
      String left = parts[0];
      String right = parts[1];
      if (!checkCompatible(sf4, left, argu)) {
         exit(1);
      }
      return right;

   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public String visit(ExpressionList n, allclasses argu) {
      String sf0=n.f0.accept(this, argu);
      String sf1 = n.f1.accept(this, argu);
      if (sf1 != null) {
         sf0 = sf0.concat(sf1);
      }
      return sf0;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public String visit(ExpressionRest n, allclasses argu) {
      n.f0.accept(this, argu);
      String sf1="*".concat(n.f1.accept(this, argu));
      return sf1;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public String visit(PrimaryExpression n, allclasses argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, allclasses argu) {
      n.f0.accept(this, argu);
      return "int";
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n, allclasses argu) {
      n.f0.accept(this, argu);
      return "boolean";
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n, allclasses argu) {
      n.f0.accept(this, argu);
      return "boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n, allclasses argu) {
      n.f0.accept(this, argu);
      String sf0 = n.f0.toString();
      if("Integer".equals(sf0)){
         return "int";
      }
      if ("Boolean".equals(sf0)) {
         return "boolean";
      }
      if ((allvars.containsKey(sf0)) && !returnRaw) {
         return allvars.get(sf0);
      }
      if(returnRaw)
         return sf0;
      exit(2);
      return "";
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n, allclasses argu) {
      n.f0.accept(this, argu);
      return currentClass;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public String visit(ArrayAllocationExpression n, allclasses argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if (!"int".equals(n.f3.accept(this, argu))) {
         exit(1);
      }
      n.f4.accept(this, argu);
      return "int[]";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n, allclasses argu) {
      n.f0.accept(this, argu);
      returnRaw = true;
      String sf1 = n.f1.accept(this, argu);
      returnRaw = false;
      if ("Integer".equals(sf1)) {
         sf1 = "int";
      }
      if ("Boolean".equals(sf1)) {
         sf1="boolean";
      }
      if (!argu.classes.containsKey(sf1)&&!sf1.startsWith("Function(")) {
         exit(2);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return sf1;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public String visit(NotExpression n, allclasses argu) {
      n.f0.accept(this, argu);
      if (!"boolean".equals(n.f1.accept(this, argu))) {
         exit(1);
      }
      return "boolean";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public String visit(BracketExpression n, allclasses argu) {
      n.f0.accept(this, argu);
      String sf1=n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return sf1;
   }

   private void exit(int err) {
      switch (err) {
         case 0 -> throw new RuntimeException("Program type checked successfully");
         case 1 -> throw new RuntimeException("Type error");
         default -> throw new RuntimeException("Symbol not found");
      }
   }
   
   private void addVars(String c,allclasses argu) {
      depth++;
      if (depth > 1000) {
         exit(1);
      }
      if (!argu.classes.containsKey(c)) {
         exit(1);
      }
      classinfo ci = argu.classes.get(c);
      if(ci.vars!=null) {
         ci.vars.forEach((k, v) -> allvars.putIfAbsent(k, v));
         ci.vars.forEach((k, v) -> allvarsinClass.putIfAbsent(k, v));
      }
      if (ci.methods != null) {
         ci.methods.forEach((k, v) -> allvars.putIfAbsent(k, v));
         ci.methods.forEach((k, v) -> allvarsinClass.putIfAbsent(k, v));
      }
      if ("ThisIsTheFinalClassNoClassAboveThis".equals(ci.parent)) {
         return;
      }
      addVars(ci.parent, argu);

   }

   private String[] splitLambda(String lam) {
      int depthHere = 0;
      for (int i = 0; i < lam.length() - 1; i++) {
         char c = lam.charAt(i);
         if (c == '(')
            depthHere++;
         else if (c == ')')
            depthHere--;
         else if (c == '>' && lam.charAt(i + 1) == '>' && depthHere == 1) {
            String left = lam.substring("Function(".length(), i).trim();
            String right = lam.substring(i + 2,lam.length()-1).trim();
            return new String[] { left, right };
         }
      }
      exit(1);
      return new String[] {};
   }

   private boolean isSubtype(String child, String parent, allclasses argu) {
      if (child.equals(parent)) return true;

      classinfo ci = argu.classes.get(child);
      while (ci != null && !ci.parent.equals("ThisIsTheFinalClassNoClassAboveThis")) {
         if (ci.parent.equals(parent)) {
            return true;
         }
         ci = argu.classes.get(ci.parent);
      }
      return false;
   }

   public boolean checkCompatible(String sf4, String left, allclasses argu) {
      String[] sf4Types = sf4.split("\\*");
      String[] leftTypes = left.split("\\*");

      if(leftTypes.length!=sf4Types.length){
         return false;
      }

      for (int i = 0; i < leftTypes.length; i++) {
         String t1 = sf4Types[i].trim();
         String t2 = leftTypes[i].trim();

         if (!(t1.equals(t2) || isSubtype(t1, t2, argu))) {
            return false;
         }
      }

      return true;
   }
}
