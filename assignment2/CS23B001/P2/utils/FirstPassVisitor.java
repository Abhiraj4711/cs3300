//
// Generated by JTB 1.3.2
//

package utils;
import visitor.*;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class FirstPassVisitor extends GJDepthFirst<classinfo,allclasses> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public classinfo visit(NodeList n, allclasses argu) {
      classinfo ci = new classinfo();
      ci.name = "";
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         classinfo c = e.nextElement().accept(this, argu);
         if(c!=null){
            if(c.vars!=null)
               ci.vars.putAll(c.vars);
            if(c.methods!=null)
               ci.methods.putAll(c.methods);
            if(c.name!=null)
               ci.name = ci.name.concat(c.name);
         }
      }
      return ci;
   }

   public classinfo visit(NodeListOptional n, allclasses argu) {
      if ( n.present() ) {
         classinfo ci = new classinfo();
         ci.name = "";
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            classinfo c = e.nextElement().accept(this, argu);
            if(c!=null){
               if(c.vars!=null)
                  ci.vars.putAll(c.vars);
               if(c.methods!=null)
                  ci.methods.putAll(c.methods);
               if(c.name!=null)
                  ci.name = ci.name.concat(c.name);
            }
         }
         return ci;
      }
      else
         return null;
   }

   public classinfo visit(NodeOptional n, allclasses argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return new classinfo();
   }

   public classinfo visit(NodeSequence n, allclasses argu) {
      classinfo ci = new classinfo();
      ci.name = "";
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         classinfo c = e.nextElement().accept(this, argu);
         if (c != null) {
            if (c.vars != null)
               ci.vars.putAll(c.vars);
            if (c.methods != null)
               ci.methods.putAll(c.methods);
            if(c.name!=null)
                  ci.name = ci.name.concat(c.name);
         }
      }
      return ci;
   }

   public classinfo visit(NodeToken n, allclasses argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( ImportFunction() )?
    * f1 -> MainClass()
    * f2 -> ( TypeDeclaration() )*
    * f3 -> <EOF>
    */
   public classinfo visit(Goal n, allclasses argu) {
      classinfo ci=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "import"
    * f1 -> "java.util.function.Function"
    * f2 -> ";"
    */
   public classinfo visit(ImportFunction n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public classinfo visit(MainClass n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public classinfo visit(TypeDeclaration n, allclasses argu) {
      classinfo ci=new classinfo();
      classinfo f0info=n.f0.accept(this, argu);
      argu.classes.put(f0info.name, f0info);
      return ci;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public classinfo visit(ClassDeclaration n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      ci.name = n.f1.accept(this, argu).name;
      n.f2.accept(this, argu);
      classinfo cf3 = n.f3.accept(this, argu);
      if(cf3!=null&&cf3.vars!=null)
         ci.vars.putAll(cf3.vars);
      classinfo cf4=n.f4.accept(this, argu);
      if(cf4!=null&&cf4.methods!=null)
         ci.methods.putAll(cf4.methods);
      n.f5.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public classinfo visit(ClassExtendsDeclaration n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      ci.name = n.f1.accept(this, argu).name;
      n.f2.accept(this, argu);
      ci.parent=n.f3.accept(this, argu).name;
      n.f4.accept(this, argu);
      classinfo cf5=n.f5.accept(this, argu);
      if(cf5!=null&&cf5.vars!=null)
         ci.vars.putAll(cf5.vars);
      classinfo cf6=n.f6.accept(this, argu);
      if(cf6!=null&&cf6.methods!=null)
         ci.methods.putAll(cf6.methods);
      n.f7.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public classinfo visit(VarDeclaration n, allclasses argu) {
      classinfo ci=new classinfo();
      ci.vars.put(n.f1.accept(this, argu).name, n.f0.accept(this, argu).name);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public classinfo visit(MethodDeclaration n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      String retType=n.f1.accept(this, argu).name;
      String funName = n.f2.accept(this, argu).name;
      n.f3.accept(this, argu);
      String params = n.f4.accept(this, argu).name;
      if (params == null) {
         params = "";
      }
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      ci.methods.put(funName, params.concat("->").concat(retType));
      return ci;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public classinfo visit(FormalParameterList n, allclasses argu) {
      classinfo ci = new classinfo();
      classinfo cf0 = n.f0.accept(this, argu);
      classinfo cf1 = n.f1.accept(this, argu);
      if (cf0 != null) {
         ci.name = cf0.name;
         if (cf1 != null && cf1.name!=null) {
            ci.name = ci.name.concat(cf1.name);
         }
      }
      return ci;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public classinfo visit(FormalParameter n, allclasses argu) {
      classinfo ci=new classinfo();
      ci.name=n.f0.accept(this, argu).name;
      n.f1.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public classinfo visit(FormalParameterRest n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      ci.name="*".concat(n.f1.accept(this, argu).name);
      return ci;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    *       | LambdaType()
    */
   public classinfo visit(Type n, allclasses argu) {
      classinfo ci=new classinfo();
      ci.name=n.f0.accept(this, argu).name;
      return ci;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public classinfo visit(ArrayType n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      ci.name = "int[]";
      return ci;
   }

   /**
    * f0 -> "boolean"
    */
   public classinfo visit(BooleanType n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      ci.name = "boolean";
      return ci;
   }

   /**
    * f0 -> "int"
    */
   public classinfo visit(IntegerType n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      ci.name = "int";
      return ci;
   }

   /**
    * f0 -> "Function"
    * f1 -> "<"
    * f2 -> Identifier()
    * f3 -> ","
    * f4 -> Identifier()
    * f5 -> ">"
    */
   public classinfo visit(LambdaType n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String f2name=n.f2.accept(this, argu).name;
      n.f3.accept(this, argu);
      String f4name=n.f4.accept(this, argu).name;
      n.f5.accept(this, argu);
      ci.name = "Function(".concat(f2name).concat(">>").concat(f4name).concat(")");
      return ci;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public classinfo visit(Statement n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public classinfo visit(Block n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public classinfo visit(AssignmentStatement n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public classinfo visit(ArrayAssignmentStatement n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public classinfo visit(IfStatement n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public classinfo visit(IfthenStatement n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public classinfo visit(IfthenElseStatement n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public classinfo visit(WhileStatement n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public classinfo visit(PrintStatement n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | LambdaExpression()
    *       | PrimaryExpression()
    */
   public classinfo visit(Expression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "("
    * f1 -> Identifier()
    * f2 -> ")"
    * f3 -> "->"
    * f4 -> Expression()
    */
   public classinfo visit(LambdaExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public classinfo visit(AndExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public classinfo visit(OrExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public classinfo visit(CompareExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public classinfo visit(neqExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public classinfo visit(AddExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public classinfo visit(MinusExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public classinfo visit(TimesExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public classinfo visit(DivExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public classinfo visit(ArrayLookup n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public classinfo visit(ArrayLength n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public classinfo visit(MessageSend n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public classinfo visit(ExpressionList n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public classinfo visit(ExpressionRest n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public classinfo visit(PrimaryExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public classinfo visit(IntegerLiteral n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "true"
    */
   public classinfo visit(TrueLiteral n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "false"
    */
   public classinfo visit(FalseLiteral n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public classinfo visit(Identifier n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      ci.name = n.f0.toString();
      if ("Integer".equals(ci.name)) {
         ci.name = "int";
      }
      if ("Boolean".equals(ci.name)) {
         ci.name = "boolean";
      }
      return ci;
   }

   /**
    * f0 -> "this"
    */
   public classinfo visit(ThisExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public classinfo visit(ArrayAllocationExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public classinfo visit(AllocationExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public classinfo visit(NotExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return ci;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public classinfo visit(BracketExpression n, allclasses argu) {
      classinfo ci=new classinfo();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return ci;
   }
}
