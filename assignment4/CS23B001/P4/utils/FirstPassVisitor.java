//
// Generated by JTB 1.3.2
//

package utils;
import syntaxtree.*;
import visitor.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

@SuppressWarnings("override")
public class FirstPassVisitor extends GJDepthFirst<String,String> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   int counter = 5000;

   public String visit(NodeList n, String argu) {
      String ans = "";
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         ans=ans+" "+e.nextElement().accept(this,argu);
      }
      return ans;
   }

   public String visit(NodeListOptional n, String argu) {
      if ( n.present() ) {
         String ans = "";
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            ans=ans+" "+e.nextElement().accept(this,argu);
         }
         return ans;
      }
      else
         return "";
   }

   public String visit(NodeOptional n, String argu) {
      if ( n.present() )
         System.out.print(n.node.accept(this, argu)+" ");
      return "";
   }

   public String visit(NodeSequence n, String argu) {
      String ans = "";
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         ans=ans+" "+e.nextElement().accept(this,argu);
      }
      return ans;
   }

   public String visit(NodeToken n, String argu) { return ""; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public String visit(Goal n, String argu) {
      System.out.println("MAIN");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return "";
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n, String argu) {
      n.f0.accept(this, argu);
      return "";
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public String visit(Procedure n, String argu) {
      System.out.print(n.f0.accept(this, argu) + " [ ");
      n.f1.accept(this, argu);
      System.out.print(n.f2.accept(this, argu) + " ] ");
      n.f3.accept(this, argu);
      System.out.println("BEGIN");
      String body = n.f4.accept(this, argu);
      System.out.println("RETURN " + body);
      System.out.println("END");
      return "";
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public String visit(Stmt n, String argu) {
      n.f0.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n, String argu) {
      System.out.println("NOOP");
      n.f0.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n, String argu) {
      System.out.println("ERROR");
      n.f0.accept(this, argu);
      return "";
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n, String argu) {
      String temp = "TEMP " + fresh();
      n.f0.accept(this, argu);
      String expr = n.f1.accept(this, argu);
      System.out.println("MOVE " + temp + " " + expr);
      System.out.println("CJUMP " + temp + " " + n.f2.accept(this, argu));
      return "";
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n, String argu) {
      n.f0.accept(this, argu);
      System.out.println("JUMP "+n.f1.accept(this, argu));
      return "";
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public String visit(HStoreStmt n, String argu) {
      String temp1 = "TEMP " + fresh();
      String temp2 = "TEMP " + fresh();
      n.f0.accept(this, argu);
      String expr1 = n.f1.accept(this, argu);
      System.out.println("MOVE " + temp1 + " " + expr1);
      String integ = n.f2.accept(this, argu);
      String expr2 = n.f3.accept(this, argu);
      System.out.println("MOVE " + temp2 + " " + expr2);
      System.out.println("HSTORE " + temp1 + " " + integ + " " + temp2);
      return "";
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n, String argu) {
      String temp = "TEMP " + fresh();
      n.f0.accept(this, argu);
      String temp1 = n.f1.accept(this, argu);
      String exp = n.f2.accept(this, argu);
      System.out.println("MOVE " + temp + " " + exp);
      String integ = n.f3.accept(this, argu);
      System.out.println("HLOAD " + temp1 + " " + temp + " " + integ);
      return "";
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n, String argu) {
      String expr = n.f2.accept(this, argu);
      System.out.print("MOVE ");
      n.f0.accept(this, argu);
      System.out.print(n.f1.accept(this, argu) + " ");
      System.out.println(expr);
      return "";
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public String visit(PrintStmt n, String argu) {
      n.f0.accept(this, argu);
      String temp = n.f1.accept(this, argu);
      System.out.println("PRINT " + temp);
      return "";
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public String visit(Exp n, String argu) {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public String visit(StmtExp n, String argu) {
      String temp = "TEMP " + fresh();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String expr = n.f3.accept(this, argu);
      System.out.println("MOVE " + temp + " " + expr);
      n.f4.accept(this, argu);
      return temp;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public String visit(Call n, String argu) {
      String temp = "TEMP " + fresh();
      n.f0.accept(this, argu);
      String name = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exprlist = splitExpr(n.f3.accept(this, argu));
      n.f4.accept(this, argu);
      System.out.println("MOVE " + temp + " CALL " + name + " ( " + exprlist + ")");
      return temp;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public String visit(HAllocate n, String argu) {
      String temp = "TEMP " + fresh();
      n.f0.accept(this, argu);
      String expr = n.f1.accept(this, argu);
      System.out.println("MOVE " + temp +" "+ expr);
      return "HALLOCATE " + temp;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public String visit(BinOp n, String argu) {
      String op = n.f0.accept(this, argu);
      String temp1 = "TEMP " + fresh();
      String temp2 = "TEMP " + fresh();
      String temp3 = "TEMP " + fresh();
      String expr1 = n.f1.accept(this, argu);
      String expr2 = n.f2.accept(this, argu);
      System.out.println("MOVE " + temp1 + " " + expr1);
      System.out.println("MOVE " + temp2 + " " + expr2);
      System.out.println("MOVE " + temp3 + " " + op + " " + temp1 + " " + temp2);
      return temp3;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public String visit(Operator n, String argu) {
      n.f0.accept(this, argu);
      return n.f0.choice.toString();
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public String visit(Temp n, String argu) {
      n.f0.accept(this, argu);
      return "TEMP " + n.f1.accept(this, argu);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, String argu) {
      n.f0.accept(this, argu);
      return n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n, String argu) {
      n.f0.accept(this, argu);
      return n.f0.toString();
   }

   private String fresh() {
      counter++;
      return String.valueOf(counter);
   }

private String splitExpr(String expr) {
   String[] parts = expr.trim().split("\\s+");
   StringBuilder result = new StringBuilder();

   for (int i = 0; i < parts.length; i++) {
      String token = parts[i];
      if (token.equals("TEMP")) {
         result.append("TEMP ").append(parts[++i]).append(" ");
      } else {
         String temp = "TEMP " + fresh();
         System.out.println("MOVE "+temp+" "+token);
         result.append(temp).append(" ");
      }
   }

   return result.toString().trim();
}


}
